import java.io.DataInputStream;
import java.io.PrintStream;
import java.io.IOException;
import java.net.Socket;
import java.net.ServerSocket;

/*
 * A chat server that delivers public and private messages.
 */
public class ServerBackup {

  // The server socket.
  private static ServerSocket serverSocket = null;
  // The client socket.
  private static Socket clientSocket = null;

  // This chat server can accept up to maxClientsCount clients' connections.
  private static final int max = 10;
  private static final clientThread[] threads = new clientThread[max];

  public static void main(String args[]) {

    // The default port number.
    int portNumber = 4444;
    if (args.length < 1) {
      System.out.println("Using port " + portNumber);
    } else {
      portNumber = Integer.valueOf(args[0]).intValue();
    }

    /*
     * Open a server socket on the portNumber (default 2222). Note that we can
     * not choose a port less than 1023 if we are not privileged users (root).
     */
    try {
      serverSocket = new ServerSocket(portNumber);
    } catch (IOException e) {
      System.out.println(e);
    }

    /*
     * Create a client socket for each connection and pass it to a new client
     * thread.
     */
    int count;
    while (true) {
      try {
        clientSocket = serverSocket.accept();
        int i = 0;
        for (i = 0; i < max; i++) {
          if (threads[i] == null) {
            count = i+1;
            (threads[i] = new clientThread(clientSocket, count, threads)).start();
            break;
          }
        }
        if (i == max) {
          PrintStream os = new PrintStream(clientSocket.getOutputStream());
          os.println("Server too busy. Try later.");
          os.close();
          clientSocket.close();
        }
      } catch (IOException e) {
        System.out.println(e);
      }
    }
  }
}

/*
 * The chat client thread. This client thread opens the input and the output
 * streams for a particular client, ask the client's name, informs all the
 * clients connected to the server about the fact that a new client has joined
 * the chat room, and as long as it receive data, echos that data back to all
 * other clients. The thread broadcast the incoming messages to all clients and
 * routes the private message to the particular client. When a client leaves the
 * chat room this thread informs also all the clients about that and terminates.
 */
class clientThread extends Thread {

  private String clientName = null;
  private DataInputStream is = null;
  private PrintStream os = null;
  private Socket clientSocket = null;
  private final clientThread[] threads;
  private int max;
  private int netCount;

  public clientThread(Socket clientSocket, int count, clientThread[] threads) {
    this.clientSocket = clientSocket;
    this.threads = threads;
    max = threads.length;
    netCount = count;
  }

  public void run() {
    int max = this.max;
  //  int count = this.count;
    clientThread[] threads = this.threads;

    try {
      /*
       * Create input and output streams for this client.
       */
      is = new DataInputStream(clientSocket.getInputStream());
      os = new PrintStream(clientSocket.getOutputStream());
      String networkName;
      //while (true) {
      //  os.println("Enter your name.");
        networkName = "Network " + netCount;
    /*    if (networkName.indexOf('@') == -1) {
          break;
        } else {
          os.println("The name should not contain '@' character.");
        }
    */
     // }

      /* Welcome the new the client. */
    //  os.println("Welcome " + name
    //      + " to our chat room.\nTo leave enter /quit in a new line.");
      synchronized (this) {
        for (int i = 0; i < max; i++) {
          if (threads[i] != null && threads[i] == this) {
            clientName = "@" + networkName;
            break;
          }
        }
    
        for (int i = 0; i < max; i++) {
          if (threads[i] != null && threads[i] != this) {
            threads[i].os.println(networkName + " has connected.");
          }
        }
      }
      /* Start the conversation. */
      while (true) {
        String line = is.readLine();
        if (line.startsWith("/disconnect")) {
          break;
        }

          /* The message is public, broadcast it to all other clients. */
          synchronized (this) {
            for (int i = 0; i < max; i++) {
              if (threads[i] != null && threads[i].clientName != null) {
                threads[i].os.println("<" + networkName + "> " + line);
              }
            }
          }
        }
      
 /*     synchronized (this) {
        for (int i = 0; i < max; i++) {
          if (threads[i] != null && threads[i] != this
              && threads[i].clientName != null) {
            threads[i].os.println("*** The user " + name
                + " is leaving the chat room !!! ***");
          }
        }
      }
*/
      /*
       * Clean up. Set the current thread variable to null so that a new client
       * could be accepted by the server.
       */
      synchronized (this) {
        for (int i = 0; i < max; i++) {
          if (threads[i] == this) {
            threads[i] = null;
            netCount--;
          }
        }
      }
      /*
       * Close the output stream, close the input stream, close the socket.
       */
      is.close();
      os.close();
      clientSocket.close();
    } catch (IOException e) {
    }
  }
}
